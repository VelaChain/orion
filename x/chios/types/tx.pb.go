// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: chios/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// this line is used by starport scaffolding # proto/tx/message
type MsgCreatePairPool struct {
	Creator   string                                 `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	DenomA    string                                 `protobuf:"bytes,2,opt,name=denomA,proto3" json:"denomA,omitempty"`
	AmountA   github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,3,opt,name=amountA,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"amountA"`
	DenomB    string                                 `protobuf:"bytes,4,opt,name=denomB,proto3" json:"denomB,omitempty"`
	AmountB   github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,5,opt,name=amountB,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"amountB"`
	SharesOut github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,6,opt,name=sharesOut,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"sharesOut"`
}

func (m *MsgCreatePairPool) Reset()         { *m = MsgCreatePairPool{} }
func (m *MsgCreatePairPool) String() string { return proto.CompactTextString(m) }
func (*MsgCreatePairPool) ProtoMessage()    {}
func (*MsgCreatePairPool) Descriptor() ([]byte, []int) {
	return fileDescriptor_4bb9f74da1115b26, []int{0}
}
func (m *MsgCreatePairPool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreatePairPool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreatePairPool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreatePairPool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreatePairPool.Merge(m, src)
}
func (m *MsgCreatePairPool) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreatePairPool) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreatePairPool.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreatePairPool proto.InternalMessageInfo

func (m *MsgCreatePairPool) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgCreatePairPool) GetDenomA() string {
	if m != nil {
		return m.DenomA
	}
	return ""
}

func (m *MsgCreatePairPool) GetDenomB() string {
	if m != nil {
		return m.DenomB
	}
	return ""
}

type MsgCreatePairPoolResponse struct {
	PoolId string     `protobuf:"bytes,1,opt,name=poolId,proto3" json:"poolId,omitempty"`
	Shares PoolShares `protobuf:"bytes,2,opt,name=shares,proto3" json:"shares"`
}

func (m *MsgCreatePairPoolResponse) Reset()         { *m = MsgCreatePairPoolResponse{} }
func (m *MsgCreatePairPoolResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreatePairPoolResponse) ProtoMessage()    {}
func (*MsgCreatePairPoolResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4bb9f74da1115b26, []int{1}
}
func (m *MsgCreatePairPoolResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreatePairPoolResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreatePairPoolResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreatePairPoolResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreatePairPoolResponse.Merge(m, src)
}
func (m *MsgCreatePairPoolResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreatePairPoolResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreatePairPoolResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreatePairPoolResponse proto.InternalMessageInfo

func (m *MsgCreatePairPoolResponse) GetPoolId() string {
	if m != nil {
		return m.PoolId
	}
	return ""
}

func (m *MsgCreatePairPoolResponse) GetShares() PoolShares {
	if m != nil {
		return m.Shares
	}
	return PoolShares{}
}

type MsgJoinPairPool struct {
	Creator   string                                 `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	DenomA    string                                 `protobuf:"bytes,2,opt,name=denomA,proto3" json:"denomA,omitempty"`
	AmountA   github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,3,opt,name=amountA,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"amountA"`
	DenomB    string                                 `protobuf:"bytes,4,opt,name=denomB,proto3" json:"denomB,omitempty"`
	AmountB   github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,5,opt,name=amountB,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"amountB"`
	SharesOut github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,6,opt,name=sharesOut,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"sharesOut"`
}

func (m *MsgJoinPairPool) Reset()         { *m = MsgJoinPairPool{} }
func (m *MsgJoinPairPool) String() string { return proto.CompactTextString(m) }
func (*MsgJoinPairPool) ProtoMessage()    {}
func (*MsgJoinPairPool) Descriptor() ([]byte, []int) {
	return fileDescriptor_4bb9f74da1115b26, []int{2}
}
func (m *MsgJoinPairPool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgJoinPairPool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgJoinPairPool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgJoinPairPool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgJoinPairPool.Merge(m, src)
}
func (m *MsgJoinPairPool) XXX_Size() int {
	return m.Size()
}
func (m *MsgJoinPairPool) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgJoinPairPool.DiscardUnknown(m)
}

var xxx_messageInfo_MsgJoinPairPool proto.InternalMessageInfo

func (m *MsgJoinPairPool) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgJoinPairPool) GetDenomA() string {
	if m != nil {
		return m.DenomA
	}
	return ""
}

func (m *MsgJoinPairPool) GetDenomB() string {
	if m != nil {
		return m.DenomB
	}
	return ""
}

type MsgJoinPairPoolResponse struct {
	PoolId string     `protobuf:"bytes,1,opt,name=poolId,proto3" json:"poolId,omitempty"`
	Shares PoolShares `protobuf:"bytes,2,opt,name=shares,proto3" json:"shares"`
}

func (m *MsgJoinPairPoolResponse) Reset()         { *m = MsgJoinPairPoolResponse{} }
func (m *MsgJoinPairPoolResponse) String() string { return proto.CompactTextString(m) }
func (*MsgJoinPairPoolResponse) ProtoMessage()    {}
func (*MsgJoinPairPoolResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4bb9f74da1115b26, []int{3}
}
func (m *MsgJoinPairPoolResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgJoinPairPoolResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgJoinPairPoolResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgJoinPairPoolResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgJoinPairPoolResponse.Merge(m, src)
}
func (m *MsgJoinPairPoolResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgJoinPairPoolResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgJoinPairPoolResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgJoinPairPoolResponse proto.InternalMessageInfo

func (m *MsgJoinPairPoolResponse) GetPoolId() string {
	if m != nil {
		return m.PoolId
	}
	return ""
}

func (m *MsgJoinPairPoolResponse) GetShares() PoolShares {
	if m != nil {
		return m.Shares
	}
	return PoolShares{}
}

type MsgExitPairPool struct {
	Creator     string                                 `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	ShareDenom  string                                 `protobuf:"bytes,2,opt,name=shareDenom,proto3" json:"shareDenom,omitempty"`
	ShareAmount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,3,opt,name=shareAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"shareAmount"`
}

func (m *MsgExitPairPool) Reset()         { *m = MsgExitPairPool{} }
func (m *MsgExitPairPool) String() string { return proto.CompactTextString(m) }
func (*MsgExitPairPool) ProtoMessage()    {}
func (*MsgExitPairPool) Descriptor() ([]byte, []int) {
	return fileDescriptor_4bb9f74da1115b26, []int{4}
}
func (m *MsgExitPairPool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgExitPairPool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgExitPairPool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgExitPairPool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgExitPairPool.Merge(m, src)
}
func (m *MsgExitPairPool) XXX_Size() int {
	return m.Size()
}
func (m *MsgExitPairPool) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgExitPairPool.DiscardUnknown(m)
}

var xxx_messageInfo_MsgExitPairPool proto.InternalMessageInfo

func (m *MsgExitPairPool) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgExitPairPool) GetShareDenom() string {
	if m != nil {
		return m.ShareDenom
	}
	return ""
}

type MsgExitPairPoolResponse struct {
	PoolId string     `protobuf:"bytes,1,opt,name=poolId,proto3" json:"poolId,omitempty"`
	Assets PoolAssets `protobuf:"bytes,2,opt,name=assets,proto3" json:"assets"`
}

func (m *MsgExitPairPoolResponse) Reset()         { *m = MsgExitPairPoolResponse{} }
func (m *MsgExitPairPoolResponse) String() string { return proto.CompactTextString(m) }
func (*MsgExitPairPoolResponse) ProtoMessage()    {}
func (*MsgExitPairPoolResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4bb9f74da1115b26, []int{5}
}
func (m *MsgExitPairPoolResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgExitPairPoolResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgExitPairPoolResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgExitPairPoolResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgExitPairPoolResponse.Merge(m, src)
}
func (m *MsgExitPairPoolResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgExitPairPoolResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgExitPairPoolResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgExitPairPoolResponse proto.InternalMessageInfo

func (m *MsgExitPairPoolResponse) GetPoolId() string {
	if m != nil {
		return m.PoolId
	}
	return ""
}

func (m *MsgExitPairPoolResponse) GetAssets() PoolAssets {
	if m != nil {
		return m.Assets
	}
	return PoolAssets{}
}

type MsgSwapPair struct {
	Creator      string                                 `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	DenomIn      string                                 `protobuf:"bytes,2,opt,name=denomIn,proto3" json:"denomIn,omitempty"`
	AmountIn     github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,3,opt,name=amountIn,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"amountIn"`
	DenomOut     string                                 `protobuf:"bytes,4,opt,name=denomOut,proto3" json:"denomOut,omitempty"`
	MinAmountOut github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,5,opt,name=minAmountOut,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"minAmountOut"`
}

func (m *MsgSwapPair) Reset()         { *m = MsgSwapPair{} }
func (m *MsgSwapPair) String() string { return proto.CompactTextString(m) }
func (*MsgSwapPair) ProtoMessage()    {}
func (*MsgSwapPair) Descriptor() ([]byte, []int) {
	return fileDescriptor_4bb9f74da1115b26, []int{6}
}
func (m *MsgSwapPair) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSwapPair) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSwapPair.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSwapPair) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSwapPair.Merge(m, src)
}
func (m *MsgSwapPair) XXX_Size() int {
	return m.Size()
}
func (m *MsgSwapPair) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSwapPair.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSwapPair proto.InternalMessageInfo

func (m *MsgSwapPair) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgSwapPair) GetDenomIn() string {
	if m != nil {
		return m.DenomIn
	}
	return ""
}

func (m *MsgSwapPair) GetDenomOut() string {
	if m != nil {
		return m.DenomOut
	}
	return ""
}

type MsgSwapPairResponse struct {
	Creator  string    `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	AssetOut PoolAsset `protobuf:"bytes,2,opt,name=assetOut,proto3" json:"assetOut"`
}

func (m *MsgSwapPairResponse) Reset()         { *m = MsgSwapPairResponse{} }
func (m *MsgSwapPairResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSwapPairResponse) ProtoMessage()    {}
func (*MsgSwapPairResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4bb9f74da1115b26, []int{7}
}
func (m *MsgSwapPairResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSwapPairResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSwapPairResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSwapPairResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSwapPairResponse.Merge(m, src)
}
func (m *MsgSwapPairResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSwapPairResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSwapPairResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSwapPairResponse proto.InternalMessageInfo

func (m *MsgSwapPairResponse) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgSwapPairResponse) GetAssetOut() PoolAsset {
	if m != nil {
		return m.AssetOut
	}
	return PoolAsset{}
}

type MsgAddLiquidityPair struct {
	Creator   string                                 `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	DenomA    string                                 `protobuf:"bytes,2,opt,name=denomA,proto3" json:"denomA,omitempty"`
	AmountA   github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,3,opt,name=amountA,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"amountA"`
	DenomB    string                                 `protobuf:"bytes,4,opt,name=denomB,proto3" json:"denomB,omitempty"`
	AmountB   github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,5,opt,name=amountB,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"amountB"`
	SharesOut github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,6,opt,name=sharesOut,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"sharesOut"`
}

func (m *MsgAddLiquidityPair) Reset()         { *m = MsgAddLiquidityPair{} }
func (m *MsgAddLiquidityPair) String() string { return proto.CompactTextString(m) }
func (*MsgAddLiquidityPair) ProtoMessage()    {}
func (*MsgAddLiquidityPair) Descriptor() ([]byte, []int) {
	return fileDescriptor_4bb9f74da1115b26, []int{8}
}
func (m *MsgAddLiquidityPair) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddLiquidityPair) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddLiquidityPair.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddLiquidityPair) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddLiquidityPair.Merge(m, src)
}
func (m *MsgAddLiquidityPair) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddLiquidityPair) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddLiquidityPair.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddLiquidityPair proto.InternalMessageInfo

func (m *MsgAddLiquidityPair) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgAddLiquidityPair) GetDenomA() string {
	if m != nil {
		return m.DenomA
	}
	return ""
}

func (m *MsgAddLiquidityPair) GetDenomB() string {
	if m != nil {
		return m.DenomB
	}
	return ""
}

type MsgAddLiquidityPairResponse struct {
	PoolId string     `protobuf:"bytes,1,opt,name=poolId,proto3" json:"poolId,omitempty"`
	Shares PoolShares `protobuf:"bytes,2,opt,name=shares,proto3" json:"shares"`
}

func (m *MsgAddLiquidityPairResponse) Reset()         { *m = MsgAddLiquidityPairResponse{} }
func (m *MsgAddLiquidityPairResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAddLiquidityPairResponse) ProtoMessage()    {}
func (*MsgAddLiquidityPairResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4bb9f74da1115b26, []int{9}
}
func (m *MsgAddLiquidityPairResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddLiquidityPairResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddLiquidityPairResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddLiquidityPairResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddLiquidityPairResponse.Merge(m, src)
}
func (m *MsgAddLiquidityPairResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddLiquidityPairResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddLiquidityPairResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddLiquidityPairResponse proto.InternalMessageInfo

func (m *MsgAddLiquidityPairResponse) GetPoolId() string {
	if m != nil {
		return m.PoolId
	}
	return ""
}

func (m *MsgAddLiquidityPairResponse) GetShares() PoolShares {
	if m != nil {
		return m.Shares
	}
	return PoolShares{}
}

type MsgRemoveLiquidityPair struct {
	Creator      string                                 `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	SharesDenom  string                                 `protobuf:"bytes,2,opt,name=sharesDenom,proto3" json:"sharesDenom,omitempty"`
	SharesAmount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,3,opt,name=sharesAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"sharesAmount"`
}

func (m *MsgRemoveLiquidityPair) Reset()         { *m = MsgRemoveLiquidityPair{} }
func (m *MsgRemoveLiquidityPair) String() string { return proto.CompactTextString(m) }
func (*MsgRemoveLiquidityPair) ProtoMessage()    {}
func (*MsgRemoveLiquidityPair) Descriptor() ([]byte, []int) {
	return fileDescriptor_4bb9f74da1115b26, []int{10}
}
func (m *MsgRemoveLiquidityPair) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRemoveLiquidityPair) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRemoveLiquidityPair.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRemoveLiquidityPair) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRemoveLiquidityPair.Merge(m, src)
}
func (m *MsgRemoveLiquidityPair) XXX_Size() int {
	return m.Size()
}
func (m *MsgRemoveLiquidityPair) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRemoveLiquidityPair.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRemoveLiquidityPair proto.InternalMessageInfo

func (m *MsgRemoveLiquidityPair) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgRemoveLiquidityPair) GetSharesDenom() string {
	if m != nil {
		return m.SharesDenom
	}
	return ""
}

type MsgRemoveLiquidityPairResponse struct {
	Creator string     `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Assets  PoolAssets `protobuf:"bytes,2,opt,name=assets,proto3" json:"assets"`
}

func (m *MsgRemoveLiquidityPairResponse) Reset()         { *m = MsgRemoveLiquidityPairResponse{} }
func (m *MsgRemoveLiquidityPairResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRemoveLiquidityPairResponse) ProtoMessage()    {}
func (*MsgRemoveLiquidityPairResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4bb9f74da1115b26, []int{11}
}
func (m *MsgRemoveLiquidityPairResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRemoveLiquidityPairResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRemoveLiquidityPairResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRemoveLiquidityPairResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRemoveLiquidityPairResponse.Merge(m, src)
}
func (m *MsgRemoveLiquidityPairResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRemoveLiquidityPairResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRemoveLiquidityPairResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRemoveLiquidityPairResponse proto.InternalMessageInfo

func (m *MsgRemoveLiquidityPairResponse) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgRemoveLiquidityPairResponse) GetAssets() PoolAssets {
	if m != nil {
		return m.Assets
	}
	return PoolAssets{}
}

func init() {
	proto.RegisterType((*MsgCreatePairPool)(nil), "VelaChain.orion.chios.MsgCreatePairPool")
	proto.RegisterType((*MsgCreatePairPoolResponse)(nil), "VelaChain.orion.chios.MsgCreatePairPoolResponse")
	proto.RegisterType((*MsgJoinPairPool)(nil), "VelaChain.orion.chios.MsgJoinPairPool")
	proto.RegisterType((*MsgJoinPairPoolResponse)(nil), "VelaChain.orion.chios.MsgJoinPairPoolResponse")
	proto.RegisterType((*MsgExitPairPool)(nil), "VelaChain.orion.chios.MsgExitPairPool")
	proto.RegisterType((*MsgExitPairPoolResponse)(nil), "VelaChain.orion.chios.MsgExitPairPoolResponse")
	proto.RegisterType((*MsgSwapPair)(nil), "VelaChain.orion.chios.MsgSwapPair")
	proto.RegisterType((*MsgSwapPairResponse)(nil), "VelaChain.orion.chios.MsgSwapPairResponse")
	proto.RegisterType((*MsgAddLiquidityPair)(nil), "VelaChain.orion.chios.MsgAddLiquidityPair")
	proto.RegisterType((*MsgAddLiquidityPairResponse)(nil), "VelaChain.orion.chios.MsgAddLiquidityPairResponse")
	proto.RegisterType((*MsgRemoveLiquidityPair)(nil), "VelaChain.orion.chios.MsgRemoveLiquidityPair")
	proto.RegisterType((*MsgRemoveLiquidityPairResponse)(nil), "VelaChain.orion.chios.MsgRemoveLiquidityPairResponse")
}

func init() { proto.RegisterFile("chios/tx.proto", fileDescriptor_4bb9f74da1115b26) }

var fileDescriptor_4bb9f74da1115b26 = []byte{
	// 688 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x56, 0xc1, 0x4e, 0xdb, 0x4c,
	0x10, 0x8e, 0x03, 0x84, 0x30, 0x20, 0xfe, 0x1f, 0xd3, 0x52, 0xd7, 0x95, 0x0c, 0xf5, 0x01, 0xa1,
	0x4a, 0xd8, 0x15, 0x55, 0xcf, 0x55, 0x4c, 0x2b, 0x35, 0x88, 0xa8, 0xc8, 0x48, 0x3d, 0x70, 0x33,
	0xb1, 0xeb, 0x58, 0x8d, 0xbd, 0xa9, 0xd7, 0xa1, 0x41, 0xbc, 0x04, 0x2f, 0xd0, 0x7b, 0x5f, 0xa2,
	0xaa, 0x7a, 0xe3, 0xc8, 0xb1, 0xea, 0x01, 0x55, 0xc9, 0x73, 0x54, 0xaa, 0x76, 0xbd, 0x36, 0x9b,
	0xc4, 0x49, 0xdc, 0x44, 0xdc, 0x38, 0x25, 0xb3, 0xfb, 0xcd, 0xf7, 0xad, 0xbf, 0x19, 0x8f, 0x17,
	0x56, 0xeb, 0x0d, 0x0f, 0x61, 0x3d, 0xea, 0x68, 0xad, 0x10, 0x45, 0x48, 0x7c, 0xf8, 0xde, 0x69,
	0x5a, 0xfb, 0x0d, 0xcb, 0x0b, 0x34, 0x14, 0x7a, 0x28, 0xd0, 0xe8, 0xbe, 0xfc, 0xc0, 0x45, 0x2e,
	0xa2, 0x08, 0x9d, 0xfc, 0x8b, 0xc1, 0xf2, 0x1a, 0x4b, 0x3e, 0x6f, 0x39, 0x38, 0x5e, 0x52, 0xbf,
	0x17, 0x61, 0xad, 0x86, 0xdd, 0xfd, 0xd0, 0xb1, 0x22, 0xe7, 0xc8, 0xf2, 0xc2, 0x23, 0x84, 0x9a,
	0xa2, 0x04, 0x8b, 0x75, 0xb2, 0x82, 0x42, 0x49, 0xd8, 0x12, 0x76, 0x96, 0xcc, 0x24, 0x14, 0x37,
	0xa0, 0x64, 0x3b, 0x01, 0xf2, 0x2b, 0x52, 0x91, 0x6e, 0xb0, 0x48, 0x7c, 0x0b, 0x8b, 0x96, 0x8f,
	0xda, 0x41, 0x54, 0x91, 0xe6, 0xc8, 0x86, 0xa1, 0x5d, 0xdd, 0x6c, 0x16, 0x7e, 0xdd, 0x6c, 0x6e,
	0xbb, 0x5e, 0xd4, 0x68, 0x9f, 0x6a, 0x75, 0xe4, 0xeb, 0x75, 0x84, 0x7d, 0x84, 0xd9, 0xcf, 0x2e,
	0xb6, 0x3f, 0xb2, 0xa3, 0x54, 0x83, 0xc8, 0x4c, 0xd2, 0x53, 0x05, 0x43, 0x9a, 0xe7, 0x14, 0x8c,
	0x5b, 0x05, 0x43, 0x5a, 0x98, 0x45, 0xc1, 0x10, 0x0f, 0x61, 0x09, 0x37, 0xac, 0xd0, 0xc1, 0xef,
	0xda, 0x91, 0x54, 0x9a, 0x8a, 0xeb, 0x96, 0x40, 0x8d, 0xe0, 0xf1, 0x90, 0x81, 0xa6, 0x83, 0x5b,
	0x28, 0xc0, 0x0e, 0x79, 0x98, 0x16, 0x42, 0xcd, 0xaa, 0xcd, 0x7c, 0x64, 0x91, 0xf8, 0x0a, 0x4a,
	0x31, 0x03, 0xb5, 0x71, 0x79, 0xef, 0xa9, 0x96, 0x59, 0x47, 0x8d, 0x90, 0x1d, 0x53, 0xa0, 0x31,
	0x4f, 0x8e, 0x68, 0xb2, 0x34, 0xf5, 0x5b, 0x11, 0xfe, 0xab, 0x61, 0xf7, 0x00, 0x79, 0xc1, 0x7d,
	0xd5, 0xa6, 0xa8, 0x5a, 0x08, 0x8f, 0x06, 0xec, 0xbb, 0xfb, 0x9a, 0x7d, 0x11, 0x68, 0xcd, 0xde,
	0x74, 0xbc, 0x28, 0x47, 0xcd, 0x14, 0x00, 0x9a, 0xf7, 0x9a, 0x18, 0xc9, 0xea, 0xc6, 0xad, 0x88,
	0x47, 0xb0, 0x4c, 0xa3, 0x0a, 0xf5, 0x67, 0xca, 0xfa, 0xf1, 0x14, 0xcc, 0x13, 0xfe, 0x78, 0x79,
	0x3c, 0xb1, 0x30, 0x76, 0xa2, 0x3c, 0x9e, 0x54, 0x28, 0x30, 0xf1, 0x24, 0x4e, 0x53, 0xff, 0x08,
	0xb0, 0x5c, 0xc3, 0xee, 0xf1, 0x67, 0xab, 0x45, 0x44, 0xc7, 0xf8, 0x21, 0xc1, 0x22, 0xed, 0xa9,
	0x6a, 0xc0, 0xcc, 0x48, 0x42, 0xf1, 0x00, 0xca, 0x71, 0x93, 0x54, 0x83, 0x29, 0x6d, 0x48, 0xf3,
	0x45, 0x19, 0xca, 0x94, 0x96, 0x34, 0x59, 0xdc, 0xc9, 0x69, 0x2c, 0x9a, 0xb0, 0xe2, 0x7b, 0x41,
	0x6c, 0x16, 0xd9, 0x9f, 0xae, 0xa1, 0xfb, 0x38, 0x54, 0x0c, 0xeb, 0xdc, 0xe3, 0xa7, 0x7e, 0x8f,
	0xb6, 0xc1, 0x80, 0x32, 0xb5, 0x8e, 0x1c, 0x20, 0xf6, 0x7c, 0x6b, 0x92, 0xe7, 0xcc, 0xf2, 0x34,
	0x4f, 0xfd, 0x51, 0xa4, 0xaa, 0x15, 0xdb, 0x3e, 0xf4, 0x3e, 0xb5, 0x3d, 0xdb, 0x8b, 0xce, 0x27,
	0x98, 0x7f, 0x3f, 0x40, 0x06, 0x07, 0xc8, 0x19, 0x3c, 0xc9, 0xb0, 0xf0, 0xee, 0x87, 0xc8, 0x57,
	0x01, 0x36, 0x6a, 0xd8, 0x35, 0x1d, 0x1f, 0x9d, 0x39, 0x79, 0xcb, 0xb7, 0xc5, 0x66, 0x05, 0xe6,
	0x87, 0x09, 0xbf, 0x44, 0x7a, 0x3b, 0x0e, 0x67, 0x1a, 0x27, 0x7d, 0x1c, 0xea, 0x05, 0x28, 0xd9,
	0x27, 0xcd, 0xd1, 0xe6, 0xb3, 0x0e, 0x96, 0xbd, 0xcb, 0x05, 0x98, 0xab, 0x61, 0x57, 0x6c, 0xc2,
	0xea, 0xc0, 0xe5, 0x66, 0x67, 0x04, 0xd5, 0xd0, 0x57, 0x5c, 0x7e, 0x9e, 0x17, 0x99, 0x3e, 0xd0,
	0x07, 0x58, 0xe9, 0xfb, 0x24, 0x6f, 0x8f, 0x66, 0xe0, 0x71, 0xb2, 0x96, 0x0f, 0xc7, 0xeb, 0xf4,
	0x7d, 0x46, 0xc6, 0xe8, 0xf0, 0xb8, 0x71, 0x3a, 0x99, 0x73, 0xff, 0x04, 0xca, 0xe9, 0x68, 0x56,
	0x47, 0xe7, 0x26, 0x18, 0xf9, 0xd9, 0x64, 0x4c, 0xca, 0x1d, 0xc2, 0xff, 0x43, 0x13, 0x68, 0x4c,
	0xfe, 0x20, 0x56, 0xde, 0xcb, 0x8f, 0x4d, 0x35, 0x2f, 0x60, 0x3d, 0xeb, 0xcd, 0xd9, 0x1d, 0x4d,
	0x95, 0x01, 0x97, 0x5f, 0xfe, 0x13, 0x3c, 0x11, 0x37, 0x8c, 0xab, 0xae, 0x22, 0x5c, 0x77, 0x15,
	0xe1, 0x77, 0x57, 0x11, 0x2e, 0x7b, 0x4a, 0xe1, 0xba, 0xa7, 0x14, 0x7e, 0xf6, 0x94, 0xc2, 0xc9,
	0x0e, 0xf7, 0x7e, 0xa5, 0xd4, 0x3a, 0xa5, 0xd6, 0x3b, 0x3a, 0x77, 0x6b, 0x3f, 0x2d, 0xd1, 0x6b,
	0xfb, 0x8b, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x5e, 0x22, 0x5e, 0x4a, 0x08, 0x0c, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// CreatePairPool defines a method for creating a pool for two assets
	CreatePairPool(ctx context.Context, in *MsgCreatePairPool, opts ...grpc.CallOption) (*MsgCreatePairPoolResponse, error)
	// JoinPairPool defines a method for joining an existing pool
	JoinPairPool(ctx context.Context, in *MsgJoinPairPool, opts ...grpc.CallOption) (*MsgJoinPairPoolResponse, error)
	// ExitPairPool defines a method for entirely leaving a pool
	ExitPairPool(ctx context.Context, in *MsgExitPairPool, opts ...grpc.CallOption) (*MsgExitPairPoolResponse, error)
	// SwapPair defines a method for swapping two assets using a PairPool
	SwapPair(ctx context.Context, in *MsgSwapPair, opts ...grpc.CallOption) (*MsgSwapPairResponse, error)
	// AddLiquidityPair defines a method for adding liquidity to a PairPool for an existing provider
	AddLiquidityPair(ctx context.Context, in *MsgAddLiquidityPair, opts ...grpc.CallOption) (*MsgAddLiquidityPairResponse, error)
	// RemoveLiquidityPair defines a method for removing some liquidity from a PairPool but not all
	RemoveLiquidityPair(ctx context.Context, in *MsgRemoveLiquidityPair, opts ...grpc.CallOption) (*MsgRemoveLiquidityPairResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) CreatePairPool(ctx context.Context, in *MsgCreatePairPool, opts ...grpc.CallOption) (*MsgCreatePairPoolResponse, error) {
	out := new(MsgCreatePairPoolResponse)
	err := c.cc.Invoke(ctx, "/VelaChain.orion.chios.Msg/CreatePairPool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) JoinPairPool(ctx context.Context, in *MsgJoinPairPool, opts ...grpc.CallOption) (*MsgJoinPairPoolResponse, error) {
	out := new(MsgJoinPairPoolResponse)
	err := c.cc.Invoke(ctx, "/VelaChain.orion.chios.Msg/JoinPairPool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ExitPairPool(ctx context.Context, in *MsgExitPairPool, opts ...grpc.CallOption) (*MsgExitPairPoolResponse, error) {
	out := new(MsgExitPairPoolResponse)
	err := c.cc.Invoke(ctx, "/VelaChain.orion.chios.Msg/ExitPairPool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SwapPair(ctx context.Context, in *MsgSwapPair, opts ...grpc.CallOption) (*MsgSwapPairResponse, error) {
	out := new(MsgSwapPairResponse)
	err := c.cc.Invoke(ctx, "/VelaChain.orion.chios.Msg/SwapPair", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AddLiquidityPair(ctx context.Context, in *MsgAddLiquidityPair, opts ...grpc.CallOption) (*MsgAddLiquidityPairResponse, error) {
	out := new(MsgAddLiquidityPairResponse)
	err := c.cc.Invoke(ctx, "/VelaChain.orion.chios.Msg/AddLiquidityPair", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RemoveLiquidityPair(ctx context.Context, in *MsgRemoveLiquidityPair, opts ...grpc.CallOption) (*MsgRemoveLiquidityPairResponse, error) {
	out := new(MsgRemoveLiquidityPairResponse)
	err := c.cc.Invoke(ctx, "/VelaChain.orion.chios.Msg/RemoveLiquidityPair", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// CreatePairPool defines a method for creating a pool for two assets
	CreatePairPool(context.Context, *MsgCreatePairPool) (*MsgCreatePairPoolResponse, error)
	// JoinPairPool defines a method for joining an existing pool
	JoinPairPool(context.Context, *MsgJoinPairPool) (*MsgJoinPairPoolResponse, error)
	// ExitPairPool defines a method for entirely leaving a pool
	ExitPairPool(context.Context, *MsgExitPairPool) (*MsgExitPairPoolResponse, error)
	// SwapPair defines a method for swapping two assets using a PairPool
	SwapPair(context.Context, *MsgSwapPair) (*MsgSwapPairResponse, error)
	// AddLiquidityPair defines a method for adding liquidity to a PairPool for an existing provider
	AddLiquidityPair(context.Context, *MsgAddLiquidityPair) (*MsgAddLiquidityPairResponse, error)
	// RemoveLiquidityPair defines a method for removing some liquidity from a PairPool but not all
	RemoveLiquidityPair(context.Context, *MsgRemoveLiquidityPair) (*MsgRemoveLiquidityPairResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) CreatePairPool(ctx context.Context, req *MsgCreatePairPool) (*MsgCreatePairPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePairPool not implemented")
}
func (*UnimplementedMsgServer) JoinPairPool(ctx context.Context, req *MsgJoinPairPool) (*MsgJoinPairPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinPairPool not implemented")
}
func (*UnimplementedMsgServer) ExitPairPool(ctx context.Context, req *MsgExitPairPool) (*MsgExitPairPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExitPairPool not implemented")
}
func (*UnimplementedMsgServer) SwapPair(ctx context.Context, req *MsgSwapPair) (*MsgSwapPairResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SwapPair not implemented")
}
func (*UnimplementedMsgServer) AddLiquidityPair(ctx context.Context, req *MsgAddLiquidityPair) (*MsgAddLiquidityPairResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddLiquidityPair not implemented")
}
func (*UnimplementedMsgServer) RemoveLiquidityPair(ctx context.Context, req *MsgRemoveLiquidityPair) (*MsgRemoveLiquidityPairResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveLiquidityPair not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_CreatePairPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreatePairPool)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreatePairPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/VelaChain.orion.chios.Msg/CreatePairPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreatePairPool(ctx, req.(*MsgCreatePairPool))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_JoinPairPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgJoinPairPool)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).JoinPairPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/VelaChain.orion.chios.Msg/JoinPairPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).JoinPairPool(ctx, req.(*MsgJoinPairPool))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ExitPairPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgExitPairPool)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ExitPairPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/VelaChain.orion.chios.Msg/ExitPairPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ExitPairPool(ctx, req.(*MsgExitPairPool))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SwapPair_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSwapPair)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SwapPair(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/VelaChain.orion.chios.Msg/SwapPair",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SwapPair(ctx, req.(*MsgSwapPair))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AddLiquidityPair_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddLiquidityPair)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AddLiquidityPair(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/VelaChain.orion.chios.Msg/AddLiquidityPair",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AddLiquidityPair(ctx, req.(*MsgAddLiquidityPair))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RemoveLiquidityPair_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRemoveLiquidityPair)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RemoveLiquidityPair(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/VelaChain.orion.chios.Msg/RemoveLiquidityPair",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RemoveLiquidityPair(ctx, req.(*MsgRemoveLiquidityPair))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "VelaChain.orion.chios.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePairPool",
			Handler:    _Msg_CreatePairPool_Handler,
		},
		{
			MethodName: "JoinPairPool",
			Handler:    _Msg_JoinPairPool_Handler,
		},
		{
			MethodName: "ExitPairPool",
			Handler:    _Msg_ExitPairPool_Handler,
		},
		{
			MethodName: "SwapPair",
			Handler:    _Msg_SwapPair_Handler,
		},
		{
			MethodName: "AddLiquidityPair",
			Handler:    _Msg_AddLiquidityPair_Handler,
		},
		{
			MethodName: "RemoveLiquidityPair",
			Handler:    _Msg_RemoveLiquidityPair_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chios/tx.proto",
}

func (m *MsgCreatePairPool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreatePairPool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreatePairPool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.SharesOut.Size()
		i -= size
		if _, err := m.SharesOut.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size := m.AmountB.Size()
		i -= size
		if _, err := m.AmountB.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if len(m.DenomB) > 0 {
		i -= len(m.DenomB)
		copy(dAtA[i:], m.DenomB)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DenomB)))
		i--
		dAtA[i] = 0x22
	}
	{
		size := m.AmountA.Size()
		i -= size
		if _, err := m.AmountA.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.DenomA) > 0 {
		i -= len(m.DenomA)
		copy(dAtA[i:], m.DenomA)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DenomA)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreatePairPoolResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreatePairPoolResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreatePairPoolResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Shares.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.PoolId) > 0 {
		i -= len(m.PoolId)
		copy(dAtA[i:], m.PoolId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.PoolId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgJoinPairPool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgJoinPairPool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgJoinPairPool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.SharesOut.Size()
		i -= size
		if _, err := m.SharesOut.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size := m.AmountB.Size()
		i -= size
		if _, err := m.AmountB.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if len(m.DenomB) > 0 {
		i -= len(m.DenomB)
		copy(dAtA[i:], m.DenomB)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DenomB)))
		i--
		dAtA[i] = 0x22
	}
	{
		size := m.AmountA.Size()
		i -= size
		if _, err := m.AmountA.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.DenomA) > 0 {
		i -= len(m.DenomA)
		copy(dAtA[i:], m.DenomA)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DenomA)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgJoinPairPoolResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgJoinPairPoolResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgJoinPairPoolResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Shares.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.PoolId) > 0 {
		i -= len(m.PoolId)
		copy(dAtA[i:], m.PoolId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.PoolId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgExitPairPool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgExitPairPool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgExitPairPool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.ShareAmount.Size()
		i -= size
		if _, err := m.ShareAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.ShareDenom) > 0 {
		i -= len(m.ShareDenom)
		copy(dAtA[i:], m.ShareDenom)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ShareDenom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgExitPairPoolResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgExitPairPoolResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgExitPairPoolResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Assets.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.PoolId) > 0 {
		i -= len(m.PoolId)
		copy(dAtA[i:], m.PoolId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.PoolId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSwapPair) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSwapPair) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSwapPair) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.MinAmountOut.Size()
		i -= size
		if _, err := m.MinAmountOut.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if len(m.DenomOut) > 0 {
		i -= len(m.DenomOut)
		copy(dAtA[i:], m.DenomOut)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DenomOut)))
		i--
		dAtA[i] = 0x22
	}
	{
		size := m.AmountIn.Size()
		i -= size
		if _, err := m.AmountIn.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.DenomIn) > 0 {
		i -= len(m.DenomIn)
		copy(dAtA[i:], m.DenomIn)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DenomIn)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSwapPairResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSwapPairResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSwapPairResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.AssetOut.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAddLiquidityPair) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddLiquidityPair) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddLiquidityPair) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.SharesOut.Size()
		i -= size
		if _, err := m.SharesOut.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size := m.AmountB.Size()
		i -= size
		if _, err := m.AmountB.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if len(m.DenomB) > 0 {
		i -= len(m.DenomB)
		copy(dAtA[i:], m.DenomB)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DenomB)))
		i--
		dAtA[i] = 0x22
	}
	{
		size := m.AmountA.Size()
		i -= size
		if _, err := m.AmountA.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.DenomA) > 0 {
		i -= len(m.DenomA)
		copy(dAtA[i:], m.DenomA)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DenomA)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAddLiquidityPairResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddLiquidityPairResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddLiquidityPairResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Shares.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.PoolId) > 0 {
		i -= len(m.PoolId)
		copy(dAtA[i:], m.PoolId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.PoolId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRemoveLiquidityPair) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRemoveLiquidityPair) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRemoveLiquidityPair) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.SharesAmount.Size()
		i -= size
		if _, err := m.SharesAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.SharesDenom) > 0 {
		i -= len(m.SharesDenom)
		copy(dAtA[i:], m.SharesDenom)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SharesDenom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRemoveLiquidityPairResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRemoveLiquidityPairResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRemoveLiquidityPairResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Assets.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgCreatePairPool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.DenomA)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.AmountA.Size()
	n += 1 + l + sovTx(uint64(l))
	l = len(m.DenomB)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.AmountB.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.SharesOut.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgCreatePairPoolResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PoolId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Shares.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgJoinPairPool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.DenomA)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.AmountA.Size()
	n += 1 + l + sovTx(uint64(l))
	l = len(m.DenomB)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.AmountB.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.SharesOut.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgJoinPairPoolResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PoolId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Shares.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgExitPairPool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ShareDenom)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.ShareAmount.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgExitPairPoolResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PoolId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Assets.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgSwapPair) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.DenomIn)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.AmountIn.Size()
	n += 1 + l + sovTx(uint64(l))
	l = len(m.DenomOut)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.MinAmountOut.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgSwapPairResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.AssetOut.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgAddLiquidityPair) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.DenomA)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.AmountA.Size()
	n += 1 + l + sovTx(uint64(l))
	l = len(m.DenomB)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.AmountB.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.SharesOut.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgAddLiquidityPairResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PoolId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Shares.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgRemoveLiquidityPair) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SharesDenom)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.SharesAmount.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgRemoveLiquidityPairResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Assets.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgCreatePairPool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreatePairPool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreatePairPool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DenomA", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DenomA = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountA", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AmountA.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DenomB", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DenomB = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountB", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AmountB.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SharesOut", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SharesOut.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreatePairPoolResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreatePairPoolResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreatePairPoolResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shares", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Shares.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgJoinPairPool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgJoinPairPool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgJoinPairPool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DenomA", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DenomA = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountA", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AmountA.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DenomB", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DenomB = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountB", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AmountB.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SharesOut", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SharesOut.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgJoinPairPoolResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgJoinPairPoolResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgJoinPairPoolResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shares", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Shares.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgExitPairPool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgExitPairPool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgExitPairPool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShareDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShareDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShareAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ShareAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgExitPairPoolResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgExitPairPoolResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgExitPairPoolResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Assets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Assets.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSwapPair) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSwapPair: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSwapPair: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DenomIn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DenomIn = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountIn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AmountIn.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DenomOut", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DenomOut = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinAmountOut", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinAmountOut.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSwapPairResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSwapPairResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSwapPairResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetOut", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AssetOut.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddLiquidityPair) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddLiquidityPair: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddLiquidityPair: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DenomA", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DenomA = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountA", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AmountA.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DenomB", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DenomB = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountB", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AmountB.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SharesOut", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SharesOut.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddLiquidityPairResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddLiquidityPairResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddLiquidityPairResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shares", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Shares.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRemoveLiquidityPair) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRemoveLiquidityPair: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRemoveLiquidityPair: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SharesDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SharesDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SharesAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SharesAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRemoveLiquidityPairResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRemoveLiquidityPairResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRemoveLiquidityPairResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Assets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Assets.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
